inference engine

while there is at least one fact f remaining in the FB

    for each rule r from KB do

        if f âˆˆ premise(r) then remove(premise(r),f)
        end if
        
        if is_empty(premise(r)) then add(FB,conclusion)
        end if

    end for

end while
----------------------------------------------------
Function fact_new

data: char, new_fact, integer ID;
output: Fact

ID = 0;

Fact new_fact
id(new_fact) = ID
desc(new_fact)=desc
return new_fact

end
---------------------------------------------------
Function fact_get_desc

data: fact
output:char

return desc(fact)
end
---------------------------------------------------
function fact_test_eq

data: fact1, fact2
output:true or false

if id(fact1) == id(fact2) then
    return true
else
    return false
end if
end
---------------------------------------------------
Function FB_new

Data: FactBase emp_fb
output: emp_fb

head(emp_fb) = NULL;
tail(emp_fb) = NULL;

return emp_fb
end
--------------------------------------------------
function FB_is_empty

Data: factbase fb
output: true or false

if(head(fb)) = Undefined then
    return true
else
    return false
end if
end
---------------------------------------------------

function empty_rule

data:void
output: rule (empty)

    Rule emp_rule
    head(premise(emp_rule)) = Undefined
    id(conclusion(emp_rule)) = Undefined
    desc(conclusion(emp_rule)) = Undefined

    return emp_rule
end

-------------------------------------------------

Function FB_insert_head

data: FactBase, Fact, FactBaseElem
Output: FactBase

FactBaseElem new_el

    new_el = creat(element)
    fact(new_el) = fact
    next(new_el) = head(premise)
    prev(new_el) = Undefined

    if is_empty(head(premise)) then
        tail(premise) = new_el
    else
        prev(head(premise)) = new_el
    end if

    head(premise) = new_el

return premise
end
-------------------------------------------------

Function FB_insert_tail

data: FactBase, Fact, FactBaseElem
Output: FactBase

    new_el=creat(element)
    fact(new_el) = fact
    next(new_el) = Undefined
    prev(new_el) = tail(premise)

    if is_empty(head(premise)) then
        head(premise) = new_el
    else
        next(tail(premise)) = new_el
    end if

    tail(premise) = new_el

return premise
end
-------------------------------------------------
function FB_remove_head

data: factbase fb, FactBase new_fb
output: factbase new_fb

    if FB_is_empty(fb) then
        new_fb = FB_new()
    else
        head(new_fb) = next(head(fb))
        
        if FB_is_empty = false then
            prev(head(new_fb)) = Undefined
        else
            tail(new_fb) = NULL
        end if
        free(head(fb))
    end if

    return new_fb
end
-------------------------------------------------
function FB_remove_fact

data: FactBase, Fact
output: FactBase

    FactBase new_premise

    if head(premise) = Undefined then
        head(new_premise) = Undefined
        tail(new_premise) = Undefined
    else

        if test_fact_equality(fact(head(premise)), fact_to_remove) then
            new_premise = FB_remove_fact(FB_remove_head(premise), fact_to_remove)
        else
            FactBase smaller_premise = premise
            head(smaller_premise) = next(head(smaller_premise))
            new_premise = FB_insert_head(FB_remove_fact(smaller_premise, fact_to_remove, fact(head(premise))
        end if
    end if

return new_premise    

end

------------------------------------------------

KNOWLEDGE BASE

-------------------------------------------------
function is_premise_empty

data: Rule rule
output:true or false

return FB_is_empty(premise(rule))
end
-------------------------------------------------
Function rule_new

data: fact conclu, rule emp_rule
output: rule emp_rule

    premise(emp_rule) = FB_new()
    conclusion(emp_rule) = conclu

    return emp_rule
end
-------------------------------------------------
fonction rule_get_conclu

data: Rule rule
output: conclusion(rule)

return conclusion(rule)

end
-------------------------------------------------
function rule_add_fact

data:Rule rule, Fact fact
output: Rule rule
    premise(rule) = FB_insert_tail(premise(rule))
    return rule
end
-------------------------------------------------
function rule_remove_premise_fact

data: RUle rule
output: Rule rule

    premise(rule) = FB_remove_fact(premise(rule),fact)
    return rule
end
-------------------------------------------------
function RB_new

data:Rulebase emp_RB
output: RuleBase emp_RB

    emp_RB = NULL
    return emp_RB
end
-------------------------------------------------
function RB_is_empty

data: RulseBase rb
output: boolean (true or false)

    if rb = Undefined then
        return true
    else
        return false
    end  if 
end
-------------------------------------------------
function RB_insert_head

data: RuleBase rb, Rule rule, RuleBaseElem new_el
output: RuleBase rb

new_el = creat(element)
    rule(new_el) = rule

    if RB_is_empty(rb) then
        next(new_el) = Undefined
    else
        next(new_el) = rb 
    end if

    rb = new_el

return rb

end
-------------------------------------------------
function RB_remove_head

data: RuleBase rb, RuleBase new_rb
output: RuleBase new_rb

if RB_is_empty(rb) then
    return Undefined
else
    new_rb=next(rb)
    free(rb)
    return new_rb
end if
end
